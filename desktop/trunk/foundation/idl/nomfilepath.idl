/* ***** BEGIN LICENSE BLOCK *****
* Version: CDDL 1.0/LGPL 2.1
*
* The contents of this file are subject to the COMMON DEVELOPMENT AND
* DISTRIBUTION LICENSE (CDDL) Version 1.0 (the "License"); you may not use
* this file except in compliance with the License. You may obtain a copy of
* the License at http://www.sun.com/cddl/
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
* for the specific language governing rights and limitations under the
* License.
*
* The Original Code is "NOM" Netlabs Object Model
*
* The Initial Developer of the Original Code is
* netlabs.org: Chris Wohlgemuth <cinc-ml@netlabs.org>.
* Portions created by the Initial Developer are Copyright (C) 2005-2006
* the Initial Developer. All Rights Reserved.
*
* Contributor(s):
*
* Alternatively, the contents of this file may be used under the terms of
* the GNU Lesser General Public License Version 2.1 (the "LGPL"), in which
* case the provisions of the LGPL are applicable instead of those above. If
* you wish to allow use of your version of this file only under the terms of
* the LGPL, and not to allow others to use your version of this file under
* the terms of the CDDL, indicate your decision by deleting the provisions
* above and replace them with the notice and other provisions required by the
* LGPL. If you do not delete the provisions above, a recipient may use your
* version of this file under the terms of any one of the CDDL or the LGPL.
*
* ***** END LICENSE BLOCK ***** */

#ifndef NOMPATH_IDL_INCLUDED
#define NOMPATH_IDL_INCLUDED

#include "nomstring.idl"
#include "nomfoundation.idl"

NOMCLASSNAME(NOMPath);

/** \class NOMPath
    NOMPath is a specialized string class for dealing with file or directory paths.
    As with NOMString the NOMPath class is always working on copies.
 */
interface NOMPath : NOMString
{
  /**
     The current version of this class is 1.0
   */
  NOMCLASSVERSION(1, 0);

  /**
     Append a path to the string. A path separator will be added to the current path
     if necessary and the given string appended. If the given string starts with a separator
     no additional separator will be added to the path prior to appending. If the given string
     starts with a separator and the current path ends with a separator the ending separator
     will be removed before appending.

     \remark
     Note that there's no check if the input string is an absolute path. So if an absolute path
     is given as input the resulting path may not be valid.

     \return
     The method returns a new NOMPath instance after appending.

     \sa append(), appendCString()
   */
  PNOMPath appendPath(in PNOMPath nomPath);   

  /**
     Append a separator to the path. If the path already has a separator at the end this method
     does nothing other than returning a new path object. If the given path has zero length
     a path object only holding a separator is returned.

     \return
     This method always returns a new instance of a NOMPath owned by the caller.

     \sa append(), appendPath()
   */
  PNOMPath appendSeparator();

  /**
     Strips the path separator from the end of a path if there's one.

     \return
     This method always returns a new instance of a NOMPath owned by the caller.

     \sa appendSeparator()
   */
  PNOMPath stripSeparator();

  /**

     \remark This method is only implemented for OS/2.

     \return
     Returns TRUE if the given path is absolute. On OS/2 this means it starts with a letter
     followed by a colon.
   */
  boolean  pathIsAbsolute();
 
 /**
     Returns the root of the current path. On OS/2 that is a letter followed by a colon.
     
     \remark This method is only implemented for OS/2.

     \return
     This method always returns a new instance of a NOMPath owned by the caller.
  */
  PNOMPath queryRoot();

  /**
     This method strips all characters from the beginning of a path till the first
     directory separator and also this first separator. If there's no separator in
     the path a zero length path is returned.

     \return
     This method always returns a new instance of a NOMPath owned by the caller.
     
     \sa queryPathBegin()
  */
  PNOMPath erasePathBegin();

  /**
     Returns the part of the path up to the first directory separator ('\' on OS/2).
     If there's no directory separator the whole path is returned. This method does
     not remove the part from the given path. Use erasePathBegin() to do that.

     \remark This method only works for null terminated string.

     \return
     A new NOMString object holding the first part of a path.

     \sa erasePathBegin()
   */
  PNOMPath queryPathBegin();
};

#endif  /* NOMPATH_IDL_INCLUDED */


























