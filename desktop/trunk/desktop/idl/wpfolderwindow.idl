/* ***** BEGIN LICENSE BLOCK *****
* Version: CDDL 1.0/LGPL 2.1
*
* The contents of this file are subject to the COMMON DEVELOPMENT AND
* DISTRIBUTION LICENSE (CDDL) Version 1.0 (the "License"); you may not use
* this file except in compliance with the License. You may obtain a copy of
* the License at http://www.sun.com/cddl/
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
* for the specific language governing rights and limitations under the
* License.
*
* The Original Code is "NOM" Netlabs Object Model
*
* The Initial Developer of the Original Code is
* netlabs.org: Chris Wohlgemuth <cinc-ml@netlabs.org>.
* Portions created by the Initial Developer are Copyright (C) 2005-2006
* the Initial Developer. All Rights Reserved.
*
* Contributor(s):
*
* Alternatively, the contents of this file may be used under the terms of
* the GNU Lesser General Public License Version 2.1 (the "LGPL"), in which
* case the provisions of the LGPL are applicable instead of those above. If
* you wish to allow use of your version of this file only under the terms of
* the LGPL, and not to allow others to use your version of this file under
* the terms of the CDDL, indicate your decision by deleting the provisions
* above and replace them with the notice and other provisions required by the
* LGPL. If you do not delete the provisions above, a recipient may use your
* version of this file under the terms of any one of the CDDL or the LGPL.
*
* ***** END LICENSE BLOCK ***** */

/** \file 
    
*/

#ifndef WPFLDRWINDOW_IDL_INCLUDED
#define WPFLDRWINDOW_IDL_INCLUDED

/* FIXME: this is an ugly hack to prevent inclusion of the
   wpnotebook.idl file in wpobject.idl which is included
   from wpwindow.idl. wpnotebook doesn't find the WPWindow
   class because it's defined later. This inclusion mess must be
   cleaned up.*/
#ifndef WPNOTEBOOK_IDL_INCLUDED
#define WPNOTEBOOK_IDL_INCLUDED
native PWPNoteBook;
#endif

#include <nomobj.idl>

NOMCLASSNAME(WPFolderWindow);

#include "wpwindow.idl"

/** \interface WPFolderWindow

    Default desktop window used by folders to show objects to the user.
    It's essential that the WPFolder owning the WPFolderWindow is set
    into the instance variable by using wpSetObject() a method inherited
    from WPWindow.

    This class can be used as a base class for window classes which will
    be used for folder windows. When creating a new class override nomInit()
    and create your window. Be sure to have at least one container window as
    a child of the toplevel window which will hold the folders objects. Save
    the handle to this container using wpSetContainerHandle(). Default drag and
    drop behaviour for desktop objects can easily be added by calling
    wpConnectDefaultSignalHandlers() with the created container handle.

    There is no limitation on the number of containers held by the toplevel
    window. Each of these containers can be drag and drop enabled for desktop
    objects.


 */
interface WPFolderWindow : WPWindow
{
  NOMCLASSVERSION(1, 0);

  /**
     Query the handle to the container holding the objects.
 
     \par How to override:
     This method is usually not overriden.

     \sa wpSetContainerHandle()
   */
  PGtkWidget wpQueryContainerHandle();

  /**
     Set the container handle of this folder window into the instance variable.

     \remarks Always use this method to save the handle to the folder container.
     While it's possible to write to the instance variable from within nomInit()
     (where the toplevel window is created with at least one container window as a
     child), using this methods gives subclasses the chance to alter the container
     by overriding this method.

     \param pgWidget Handle to a container window (usually GtkIconView)

     \sa wpQueryContainerHandle()
   */
  void wpSetContainerHandle(in PGtkWidget pgWidget);

  /**
     Connect signal handlers with the given container which enable drag and drop
     of desktop objects and context menus.

     \remarks Using this method every container window (don't confuse that with GtkContainer)
     can be enabled for drag and drop of desktop objects. Default context menu behaviour
     known by desktop object will be enabled, too. There's no limit on the number
     of containers in a folder window.

     \par How to override:
     This method can be overriden if additional signal handlers should be connected to the
     container.

     \param pgWidget Container window handle. This is for example an icon view.

     \sa wpSetContainerHandle()
   */  
  void wpConnectDefaultSignalHandlers(in PGtkWidget pgWidget);

  /**
     Override which creates a toplevel window with a container for icons.
   */
  NOMOVERRIDE(nomInit);

  /**
     This variable holds the container window handle (normaly a handle of a GtkIconView).

     \sa wpSetContainerHandle(), wpQueryContainerHandle()
   */
  NOMINSTANCEVAR(PGtkWidget pgContainerHandle);
};

#endif  /* WPFLDRWINDOW_IDL_INCLUDED */






